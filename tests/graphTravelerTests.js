/**
 * Created by steb on 03/05/2016.
 */
define([
    'c/ai/graphTraveler',
    'c/i/utils'
], function (graphTraveler, utils) {

    describe('graphTraveler - обход идёт с конца в начало', function () {
        var
            graph,
            testPath = [
                'xyyx', '0x00', '00x0', 'x000', 'xy0x', 'yyxx', 'yxyx'
            ];

        beforeEach(function () {
            graph = JSON.parse(
                //'{"keys":{"base":{"i":1,"t":[2],"f":[],"m":""},"0000":{"i":2,"t":[3,16,26,33],"f":[1],"m":""},"x000":{"i":3,"t":[4,9,13],"f":[2],"m":""},"xy00":{"i":4,"t":[5,7],"f":[3],"m":""},"xyx0":{"i":5,"t":[6,6],"f":[4,30],"m":""},"xyxy":{"i":6,"t":[],"f":[5,15,5,15],"m":""},"xy0x":{"i":7,"t":[8,8],"f":[4,35],"m":""},"xyyx":{"i":8,"t":[],"f":[7,12,7,12],"m":""},"x0y0":{"i":9,"t":[10,12],"f":[3],"m":""},"xxy0":{"i":10,"t":[11,11],"f":[9,22],"m":""},"xxyy":{"i":11,"t":[],"f":[10,14,10,14],"m":""},"x0yx":{"i":12,"t":[8,8],"f":[9,36],"m":""},"x00y":{"i":13,"t":[14,15],"f":[3],"m":""},"xx0y":{"i":14,"t":[11,11],"f":[13,24],"m":""},"x0xy":{"i":15,"t":[6,6],"f":[13,32],"m":""},"0x00":{"i":16,"t":[17,22,24],"f":[2],"m":""},"yx00":{"i":17,"t":[18,20],"f":[16],"m":""},"yxx0":{"i":18,"t":[19,19],"f":[17,27],"m":""},"yxxy":{"i":19,"t":[],"f":[18,25,18,25],"m":""},"yx0x":{"i":20,"t":[21,21],"f":[17,34],"m":""},"yxyx":{"i":21,"t":[],"f":[20,23,20,23],"m":""},"0xy0":{"i":22,"t":[10,23],"f":[16],"m":""},"0xyx":{"i":23,"t":[21,21],"f":[22,36],"m":""},"0x0y":{"i":24,"t":[14,25],"f":[16],"m":""},"0xxy":{"i":25,"t":[19,19],"f":[24,32],"m":""},"00x0":{"i":26,"t":[27,30,32],"f":[2],"m":""},"y0x0":{"i":27,"t":[18,28],"f":[26],"m":""},"y0xx":{"i":28,"t":[29,29],"f":[27,34],"m":""},"yyxx":{"i":29,"t":[],"f":[28,31,28,31],"m":""},"0yx0":{"i":30,"t":[5,31],"f":[26],"m":""},"0yxx":{"i":31,"t":[29,29],"f":[30,35],"m":""},"00xy":{"i":32,"t":[15,25],"f":[26],"m":""},"000x":{"i":33,"t":[34,35,36],"f":[2],"m":""},"y00x":{"i":34,"t":[20,28],"f":[33],"m":""},"0y0x":{"i":35,"t":[7,31],"f":[33],"m":""},"00yx":{"i":36,"t":[12,23],"f":[33],"m":""}},"idToKey":{"1":"base","2":"0000","3":"x000","4":"xy00","5":"xyx0","6":"xyxy","7":"xy0x","8":"xyyx","9":"x0y0","10":"xxy0","11":"xxyy","12":"x0yx","13":"x00y","14":"xx0y","15":"x0xy","16":"0x00","17":"yx00","18":"yxx0","19":"yxxy","20":"yx0x","21":"yxyx","22":"0xy0","23":"0xyx","24":"0x0y","25":"0xxy","26":"00x0","27":"y0x0","28":"y0xx","29":"yyxx","30":"0yx0","31":"0yxx","32":"00xy","33":"000x","34":"y00x","35":"0y0x","36":"00yx"}}'
                '{"keys":{"base":{"i":1,"t":[2],"f":[],"m":false},"0000":{"i":2,"t":[3,4,5,6],"f":[1],"m":false},"x000":{"i":3,"t":[],"f":[2],"m":true},"0x00":{"i":4,"t":[],"f":[2],"m":true},"00x0":{"i":5,"t":[],"f":[2],"m":true},"000x":{"i":6,"t":[7,12,15],"f":[2],"m":false},"y00x":{"i":7,"t":[8,10],"f":[6],"m":false},"yx0x":{"i":8,"t":[9],"f":[7],"m":false},"yxyx":{"i":9,"t":[],"f":[8,18],"m":false},"y0xx":{"i":10,"t":[11],"f":[7],"m":false},"yyxx":{"i":11,"t":[],"f":[10,14],"m":false},"0y0x":{"i":12,"t":[13,14],"f":[6],"m":false},"xy0x":{"i":13,"t":[],"f":[12],"m":true},"0yxx":{"i":14,"t":[11],"f":[12],"m":false},"00yx":{"i":15,"t":[16,18],"f":[6],"m":false},"x0yx":{"i":16,"t":[17],"f":[15],"m":false},"xyyx":{"i":17,"t":[],"f":[16],"m":false},"0xyx":{"i":18,"t":[9],"f":[15],"m":false}},"idToKey":{"1":"base","2":"0000","3":"x000","4":"0x00","5":"00x0","6":"000x","7":"y00x","8":"yx0x","9":"yxyx","10":"y0xx","11":"yyxx","12":"0y0x","13":"xy0x","14":"0yxx","15":"00yx","16":"x0yx","17":"xyyx","18":"0xyx"}}'
            )
        });

        it('должен находить конечные вершины', function () {
            var found = graphTraveler.findFinal(graph);

            expect(found.map(x=>x.k).sort())
                .toEqual(['xyyx', '0x00', '00x0', 'x000', 'xy0x', 'yyxx', 'yxyx'].sort());
        });

        it('должен строить список предыдущих вершин (от набора заданных конечных)', function () {
            var starts = graphTraveler.findFinal(graph);

            var froms = graphTraveler.findPrevious(starts, graph);

            expect(
                utils.toArray(froms).map(x=>x.k).sort()
            ).toEqual(
                ['0xyx', '0y0x', '0yxx', '0000', 'x0yx', 'y0xx', 'yx0x'].sort()
            );
        });

        it('из списка предыдущих должен выбирать вершины, у которых последующие вершины уже посещены', function () {
            var
                starts = graphTraveler.findFinal(graph),
                froms = graphTraveler.findPrevious(starts, graph),
                result = utils.toObject(starts, x=>x);

            var toTravel = graphTraveler.getWithoutNext(result, froms, graph);

            expect(
                toTravel.map(x=>x.k).sort()
            ).toEqual(
                ["yx0x", "0xyx", "y0xx", "0yxx", "x0yx"].sort()
            );
        });

        it('должен посещать вершины в порядке - от конечных, ' +
            'через предудыщие (у которых последующие посетил), ' +
            'вплоть до самой первой - base', function () {
            var traveled = [];

            graphTraveler.travel(graph, key=> traveled.push(key));

            expect(
                traveled
            ).toEqual([
                'x000', '0x00', '00x0', 'yxyx', 'yyxx', 'xy0x', 'xyyx',
                'yx0x', '0xyx', 'y0xx', '0yxx', 'x0yx',
                'y00x', '00yx', '0y0x',
                '000x',
                '0000',
                'base']);
        });

        xdescribe('улучшения/оптимизация', function () {

            it('должен у предыдущих вершин находить список последующих ещё не посещённых', function () {

            });

            it('должен посещать вершину только когда её последующие уже посетил', function () {

            });

            it('должен посещать стартовый набор вершин', function () {

            });

            it('должен после посещения вершины убирать её из списков последующих вершин ' +
                'вершин которые входят в список предыдущих вершин', function () {

            });

            it('должен удалять вершину из списка предыдущих после посещения', function () {

            });

            it('должен выполнять посещение вершин из списка предыдущих, ' +
                'пока они там есть', function () {

            });
        });
    });
});