есть:
    .карта ходов.
        .в ходах есть проходы к некорректным ходам.
        .нужно убрать ходы к лишним...
    .набор пометок.

вывод:
    .достаточно собрать пометки и карту - получить ещё одну карту.
    .нет - нужно отследить начиная с конца карты пути:
        .если в точку приходят из как минимум 2-х разных позиций
            .пометка неопределённо.
        .только из одной - от этой одной.

    .превратить в:
        {
            '00x000000': [{t:_num_, m:'_mark_'}, ...]
        }
    + оставить - ид к ключу_состоянию:
        {
            1: '00x000000',
            2: '00xy00000'
        }


решение:
    .найти все конечные состояния - у них нету выходов.
        .они становяться начальными состояниями, от которых идёт построение.

    .перебрать все активные, в зависимости от пометки:
        .не перемещать.
        .скопировать

+ а зачем?
    .зачем мне в начале строить матрицу с невалидными состояниями.
    .а потом их отыскивать и очищать?


тогда, получиться что я могу сгенерить только валидные состояния.
и останеться задача сделать пометки?

но ведь я и так проверяю состояния перед добавлением.
другими словами - можно сразу при генерации добавлять пометки
=> генератор возвращать должен:
    {
        idToKey: {...},
        keys: {
            '00x000000': {i: 3, t:[5, 6], f:[1], m:'_mark_' },
            '00xy00000': {i: 13, t:[...], f:[...], m:'_mark_' }
        }
    }


в итоге мне нужен обратный обход.
но можно проще - нужен ещё один stateMarker
  однако принимающий решение на основе предудущих состояний
  и обходящий с конца в начало



!!! обратный проход по направленному графу, с условиями:
  .есть набор конечных состояний.
  .в состояние попадаем только если все предудущие уже пройдены.