где фиксировать проэктные решения?
.имеется в виду, соотносяс с ПФУ, в каком этапе находятся проэктные решения.
.но что есть такое это проэктное решение?
    .имеется в виду с точки зрения ДОТУ.

    .где появляется?
        .в текущем моменте, появилось когда я решил уточнить реализацию treeGenerator-а,
        подмешав в его обязанности пометку состояний и их фильтрацию.

        .при этом, выявилось 2 варианта развития ситуации:
        .1. который был - создать все возможные комбинации:
            .при этом, генератор даёт невалидные состояния - т.е. генерит дальше/лишнее.

            .и по плану/сценарию/алгоритму решения есть этам генерации и есть етап "разбора полётов".
            т.е. анализа сгенеренного графа и его вершин.

        .2. в процессе генерации:
            .выполнять пометку состояний.
            .прерывать погружение в дерево ходов по достижению состояния с пометкой конечное.

            + тут имеется в виду, что каждый ход, порождает свой уровень дерева.
            и делать ход после последнего - выпасть за пределы допустимые.
            эти состояния нас не интерисуют, хотя поле для них есть.

    .другими словами:
        .был выявлен ещё один фактор - возможность добавить ещё одно правило в генератор.
        .исходя из него было выставлено иное целепологание.
        .а вот уже под иные цели - как следствие перестроились сценарий/алгоритмы/распределение ответственностей.

    .т.е.:
        .то, что я подразумевал под проэктным решением было цепочкой из нескольких вещей.
        .и выходит, что это смены разных цепочек....

        .т.е. проэктное решение зафиксированно в цепочке. Просто я этого не заметил.


тогда, как быть с вопросом сравнения нескольких проэктных решений?
!! но ведь целепологание разное
=> как сравнивать разное целепологание?
    .в контексте ситуации / проэкта xRay думаю это возможно сравнить только по финальной целе
    построенному графу - а точнее статическим данным для алгоритма решателя.

    .и лишь по отношению к этой, общей обоим подходам целе, возможно сравнение решений.
    по избранным параметрам:
        .количество операций.
        .занимаемая/требуемая в процессе память.

    + при этом, лишние действия:
        .добавление/удаление невалидных состояний и переходов с ними в граф.
        .либо перепометка состояний (а она вообще возникает во втором варианте?).
    учитываються как раз в оценке количества операций.

    .можно ещё подумать о сложности алгоритма...
        .например простота понимания.

        .но... думаю тесты, какие они сейчас на treeGenerator, каждый маленький аспект описан и разъяснён отдельно,
        достаточно ясно представляют/отображают ситуацию.

        .т.е. ясность понимания алгоритма, "сложения" ответственностей достигать на базе пояснений тестами.
        + да и без тестов я их сложить то ведь не смогу просто.
